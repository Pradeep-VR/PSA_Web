
@{
    ViewBag.Title = "GroupTableSwap";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var Meterid = ViewBag.id;
    var Fdate = ViewBag.fd;
    var Tdate = ViewBag.td;
    var GroupName = ViewBag.GroupName;
}


<link href="~/Content/css/Table.css" rel="stylesheet" />

<div class="heading">
    <h1>PSA | <span style="color:darkred">@Html.Raw(GroupName)</span> DATA | <span style="color:darkred;">@DateTime.Now</span></h1>
</div>
<main class="table" id="customers_table">
    <section class="table__header">
        <div class="input-group" style="background-color:lightblue;">
            <input type="search" placeholder="Search Data..." />
            @*<img src="~/Content/assets/images/search.png" alt="#" style="background-color:aquamarine;" />*@
        </div>
        <div class="export__file">
            <label for="export-file" style="background-color:lightblue;border-radius:5px;" class="export__file-btn" title="Export File"></label>
            <input type="checkbox" id="export-file">
            <div class="export__file-options">
                <label>Export As &nbsp; &#10140;</label>
                <label for="export-file" id="toCSV">EXCEL<img src="~/Content/assets/images/excel.png" alt=""></label>

            </div>
        </div>
    </section>
    <section class="table__body">
        <table id="dataTable">
            <thead>
                <tr>
                    <th> METER NAME </th>
                    <th> DateAndTime </th>
                    <th> CURRENT A </th>
                    <th> CURRENT B </th>
                    <th> CURRENT C </th>
                    <th> VOLTAGE A </th>
                    <th> VOLTAGE B </th>
                    <th> VOLTAGE C </th>
                    <th> MAX DEMAND </th>
                    <th> POWER FACTOR </th>
                    <th> ACTIVEENERGY </th>
                    <th> CONSUMPTION </th>
                </tr>
            </thead>
            <tbody>
                @* Binding From Function DownSide. *@
            </tbody>
        </table>
    </section>
</main>

<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.3/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.0/FileSaver.min.js"></script>

<script>
    window.onload = function () {

        var id = '@Html.Raw(Meterid)';
        var fdt = '@Html.Raw(Fdate)';
        var tdt = '@Html.Raw(Tdate)';
        LoadTableData(id, fdt, tdt);
    }

    function LoadTableData(strMId, strFDate, strTDate) {

        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetGroupTableData", "Graph")',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({ strId: strMId, strFD: strFDate, strTD: strTDate }),
            success: function (response) {
                if (response) {

                    const tableBody = document.querySelector('#dataTable tbody');
                    tableBody.innerHTML = '';

                    for (let i = 0; i < response.Consumption.length; i++) {
                        const row = document.createElement('tr');

                        row.innerHTML = `<tr>
                                    <td>${response.MeterName[i]}</td>
                                    <td>${response.DateAndTime[i]}</td>
                                    <td>${response.Current_A[i]}</td>
                                    <td>${response.Current_B[i]}</td>
                                    <td>${response.Current_C[i]}</td>
                                    <td>${response.Voltage_A[i]}</td>
                                    <td>${response.Voltage_B[i]}</td>
                                    <td>${response.Voltage_C[i]}</td>
                                    <td>${response.MaxDemand[i]}</td>
                                    <td>${response.PowerFactor[i]}</td>
                                    <td>${response.ActiveEnergy[i]}</td>
                                    <td>${response.Consumption[i]}</td>
                                </tr>`;
                        tableBody.appendChild(row);
                    }
                }
                else {
                    alert('No Data Found.' + response);
                }
            },
            error: function (err) {
                alert('Error : ' + err);
            }
        });
    }

    /* DEFAULT SCRIPTS FUNCTIONS */


    const search = document.querySelector('.input-group input'),
        table_rows = document.querySelectorAll('tbody tr'),
        table_headings = document.querySelectorAll('thead th');

    // 1. Searching for specific data of HTML table
    search.addEventListener('input', searchTable);

    function searchTable() {
        table_rows.forEach((row, i) => {
            let table_data = row.textContent.toLowerCase(),
                search_data = search.value.toLowerCase();

            row.classList.toggle('hide', table_data.indexOf(search_data) < 0);
            row.style.setProperty('--delay', i / 25 + 's');
        })

        document.querySelectorAll('tbody tr:not(.hide)').forEach((visible_row, i) => {
            visible_row.style.backgroundColor = (i % 2 == 0) ? 'transparent' : '#0000000b';
        });
    }

    // 2. Sorting | Ordering data of HTML table

    table_headings.forEach((head, i) => {
        let sort_asc = true;
        head.onclick = () => {
            table_headings.forEach(head => head.classList.remove('active'));
            head.classList.add('active');

            document.querySelectorAll('td').forEach(td => td.classList.remove('active'));
            table_rows.forEach(row => {
                row.querySelectorAll('td')[i].classList.add('active');
            })

            head.classList.toggle('asc', sort_asc);
            sort_asc = head.classList.contains('asc') ? false : true;

            sortTable(i, sort_asc);
        }
    })


    function sortTable(column, sort_asc) {
        [...table_rows].sort((a, b) => {
            let first_row = a.querySelectorAll('td')[column].textContent.toLowerCase(),
                second_row = b.querySelectorAll('td')[column].textContent.toLowerCase();

            return sort_asc ? (first_row < second_row ? 1 : -1) : (first_row < second_row ? -1 : 1);
        })
            .map(sorted_row => document.querySelector('tbody').appendChild(sorted_row));
    }


    // 5. Converting HTML table to CSV File

   const csv_btn = document.querySelector('#toCSV');

    const toCSV = function (table) {
        const tbody_rows = table.querySelectorAll('tbody tr');

        // Group table rows by MeterName
        const groupedData = {};
        tbody_rows.forEach(row => {
            const meterName = row.cells[0].textContent.trim();
            const rowData = Array.from(row.cells).map(cell => cell.textContent.trim());
            if (!groupedData[meterName]) {
                groupedData[meterName] = [];
            }
            groupedData[meterName].push(rowData);
        });

        return groupedData;
    }

    const downloadExcelFile = (data, fileType, fileName) => {
        const wb = XLSX.utils.book_new();

        for (const meterName in data) {
            if (data.hasOwnProperty(meterName)) {
                const wsData = [
                    ['MeterName', 'DateAndTime', 'CURRENT A', 'CURRENT B', 'CURRENT C', 'VOLTAGE A', 'VOLTAGE B', 'VOLTAGE C', 'MAX DEMAND', 'POWER FACTOR', 'ACTIVE ENERGY', 'CONSUMPTION'],
                    ...data[meterName]
                ];
                const ws = XLSX.utils.aoa_to_sheet(wsData);
                XLSX.utils.book_append_sheet(wb, ws, meterName);
            }
        }

        const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });

        function s2ab(s) {
            const buf = new ArrayBuffer(s.length);
            const view = new Uint8Array(buf);
            for (let i = 0; i < s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
        }

        saveAs(new Blob([s2ab(wbout)], { type: 'application/octet-stream' }), `${fileName}.${fileType}`);
    }

    csv_btn.onclick = () => {
        const table = document.getElementById('dataTable');
        const csvData = toCSV(table);
        downloadExcelFile(csvData, 'xlsx', '@Html.Raw(GroupName)');
    }





</script>

