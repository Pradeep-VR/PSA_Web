@{
    ViewBag.Title = "OverAllIndex";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="~/Scripts/linechart.js"></script>
<link href="~/Content/css/Table.css" rel="stylesheet" />
<style>
    .heading {
        border: 1px solid;
        background-color: #E3F2FD;
        color: dodgerblue;
        border-radius: 10px;
        font-size: 50px;
        font-family: Arial;
        font-weight: bold;
        text-align: center;
        width: 100%;
        padding: 0px 0;
        margin: 0;
    }

    select {
        appearance: none;
        outline: 0;
        box-shadow: none;
        border: 0 !important;
        background: #0d205f;
        background-image: none;
        flex: 1;
        padding: 0 1em;
        color: #fff;
        cursor: pointer;
        font-size: 1em;
        font-family: 'Open Sans', sans-serif;
    }

        select::-ms-expand {
            display: none;
        }

    .ddlist {
        margin-bottom: 25px;
        margin-left: 25px;
        position: relative;
        display: flex;
        width: 20em;
        height: 3em;
        line-height: 3;
        background: #5c6664;
        overflow: hidden;
        border-radius: .25em;
    }

        .ddlist::after {
            content: '\25BC';
            position: absolute;
            top: 0;
            right: 0;
            padding: 0 1em;
            background: #2b2e2e;
            cursor: pointer;
            pointer-events: none;
            transition: .25s all ease;
        }

        .ddlist:hover::after {
            color: #fff;
        }

    .inputt {
        margin-bottom: 10px;
        display: block;
        width: 20em;
        height: 40px;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
        border-width: 2px;
        border-color: black;
    }

    .buttonn {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        font-weight: bold;
        margin-bottom: 10px;
    }

        .buttonn:hover {
            background-color: #45a049;
        }

    .chart-container {
        width: 100%;
        height: 100%;
        overflow-x: auto; /* Enable horizontal scrolling */
    }

    .chart-wrapper {
        white-space: nowrap; /* Prevent wrapping of x-axis labels */
        display: inline-block; /* Ensure inline-block for dynamic width adjustment */
        overflow-x: auto; /* Enable horizontal scrolling */
        min-width: auto; /* Adjust based on the number of labels */
    }
</style>

<div class="jumbotron center">
    <div class="heading">OVER ALL</div>
    <div style="display:flex; flex-direction:row;">
        <div style="display:inline-block; padding-top:25px;">
            <label>GROUPS</label>
            <div class="ddlist">
                <select name="format" id="groupSelect" onchange="LoadMeterData()"></select>
            </div>
            <label>METERS</label>
            <div class="ddlist">
                <select name="format" id="meterSelect"></select>
            </div>
            <label>FROM DATE</label>
            <div style="margin-left: 25px; border-width:5px;border-color:black;">
                <input class="inputt" type="datetime-local" id="fromDate" />
            </div>
            <label>TO DATE</label>
            <div style="margin-left: 25px; border-width:5px;border-color:black;">
                <input class="inputt" type="datetime-local" id="toDate" />
            </div>
            <label>TIME INTERVAL</label>
            <div style="margin-left: 25px; border-width:5px;border-color:black;">
                <input class="inputt" type="text" id="txtInterval" value="60" />
            </div>
            <div style="margin-left: 25px; border-width:5px;border-color:black;justify-content:space-between;">
                <button class="buttonn" id="btnGraph">GRAPH</button>
                <button class="buttonn" id="btnTable">TABLE</button>
            </div>
        </div>
        <!--For Graph-->
        <div class="chart-container" id="graph_container">
            <div class="chart-wrapper" style="border-width:2px;border-color:black;border:groove; margin:20px">
                <canvas id="myLineChart" width="6000" height="560"></canvas>
            </div>
        </div>
        <!--For Table-->
        <div style="display: none;" id="customers_table">
            <main class="table" style="margin:10px;">
                <br />
                <br />
                <section class="table__body">
                    <table id="dataTable" style="background-color:lightgray" class="display">
                        <!--For Specific-->
                        <thead id="th_specific" style="display:none;">
                            <tr>
                                <th>METER</th>
                                <th>Date&Time</th>
                                <th>ACTIVEENERGY</th>
                                <th>CONSUMPTION</th>
                                <th>RY CURRENT</th>
                                <th>YB CURRENT</th>
                                <th>BR CURRENT</th>
                                <th>RY VOLTAGE</th>
                                <th>YB VOLTAGE</th>
                                <th>BR VOLTAGE</th>
                                <th>MAX DEMAND</th>
                                <th>POWER FACTOR</th>
                                <th><label for="export-file" id="toCSV"><img src="~/Content/assets/images/excel.png" alt="" style="height:30px;" title="Export File"></label></th>
                            </tr>
                        </thead>
                        <!--For OverAll-->
                        <thead id="th_overall" style="">
                            <tr>
                                <th>GROUP</th>
                                <th>Date&Time</th>
                                <th>CONSUMPTION</th>
                                <th><label for="export-file" id="toCSV"><img src="~/Content/assets/images/excel.png" alt="" style="height:30px;" title="Export File"></label></th>
                            </tr>
                        </thead>
                        <tbody>
                            @* Binding From Function DownSide. *@
                        </tbody>
                    </table>
                </section>
            </main>
        </div>


    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    var loadCnt = 0;
    var myLineChart; // Declare a global variable for the chart instance

    window.onload = function () {
        LoadGroupData();
        if (loadCnt === 0) {
            LoadMeters('', false);
        }
    }

    const increment = parseInt(@System.Configuration.ConfigurationManager.AppSettings["DStime"]);

    function LoadMeterData() {
        var data = document.getElementById("groupSelect");
        var selectedOption = data.options[data.selectedIndex];
        var selectedvalue = selectedOption.value;

        if (selectedvalue == 'ALLGROUPS') {
            LoadMeters(selectedvalue, false);
        } else {
            LoadMeters(selectedvalue, true);
        }
        loadCnt = "1";
    }

    function LoadMeters(strGroupId,strCon) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetMetersDtls", "Home")',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({ strGroupId: strGroupId, strCon: strCon }),
            success: function (response) {
                var ddlMeter = document.getElementById('meterSelect');
                ddlMeter.innerHTML = "";
                if (response) {
                    var MetersList = response.MMASTER;
                    var selectAllOption = document.createElement('option');
                    selectAllOption.value = "ALLMETERS";
                    selectAllOption.text = "SELECT ALL";
                    ddlMeter.appendChild(selectAllOption);

                    for (let i = 0; i < MetersList.length; i++) {
                        var option = document.createElement('option');
                        option.value = MetersList[i].METERID;
                        option.text = MetersList[i].METERNAME;
                        ddlMeter.appendChild(option);
                    }
                }
            }
        });
    }

    function LoadGroupData() {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetGroupsWithMeters", "Home")',
            contentType: "application/json; charset=utf-8",
            success: function (groups) {
                var ddlGroup = document.getElementById('groupSelect');
                ddlGroup.innerHTML = "";

                var selectAllOption = document.createElement('option');
                selectAllOption.value = "ALLGROUPS";
                selectAllOption.text = "SELECT ALL";
                ddlGroup.appendChild(selectAllOption);

                for (let i = 0; i < groups.length; i++) {
                    var option = document.createElement('option');
                    option.value = groups[i].GroupId;
                    option.text = groups[i].GroupName;
                    ddlGroup.appendChild(option);
                }
            }
        });
    }




    document.getElementById('btnGraph').onclick = function () {

        document.getElementById('customers_table').style = 'display:none;';
        document.getElementById('graph_container').style = '';

        var selectedGroup = document.getElementById('groupSelect').value;
        var selectedMeter = document.getElementById('meterSelect').value;
        var StartDate = document.getElementById('fromDate').value;
        var EndDate = document.getElementById('toDate').value;
        var TimeInterval = document.getElementById('txtInterval').value;

        if (selectedMeter !== "ALLMETERS" && selectedGroup !== "ALLGROUPS") {
            GetDataForGenerateGraph(selectedMeter, selectedGroup, StartDate, EndDate, TimeInterval).then((labels) => {
                if (labels != null) {
                    var sel = document.getElementById('meterSelect');
                    generateChart(labels, sel.options[sel.selectedIndex].text);
                }
            });
        } else if (selectedGroup = "ALLGROUPS") {
            GetDataForGenerateGraph_All(selectedMeter, selectedGroup, StartDate, EndDate, TimeInterval).then((labels) => {
                if (labels != null) {
                    generateChart_All(labels);
                }
            });
        }
    };

function GetDataForGenerateGraph_All(selectedMeter, selectedGroup, StartDate, EndDate, TimeInterval) {
    return new Promise((resolve, reject) => {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetOverAllIndex_Graph_All", "Graph")',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({ groupId: selectedGroup, strMeterId: selectedMeter, strFD: StartDate, strTD: EndDate, Interval: TimeInterval }),
            success: function (response) {
                if (response != null) {
                    var labels = {
                        label: response.SYNCDATETIME,
                        datasets: [
                            {
                                label: 'BODY_SHOP (KWH)',
                                data: response.BODY_SHOP_ActiveEnergy,
                                borderColor: 'rgba(75, 192, 192, 1)',
                                fill: false
                            },
                            {
                                label: 'GENERAL_ASSEMBLY (KWH)',
                                data: response.GENERAL_ASSEMBLY_ActiveEnergy,
                                borderColor: 'rgba(255, 99, 132, 1)',
                                fill: false
                            },
                            {
                                label: 'HOSTED_SERVICES (KWH)',
                                data: response.HOSTED_SERVICES_ActiveEnergy,
                                borderColor: 'rgba(54, 162, 235, 1)',
                                fill: false
                            },
                            {
                                label: 'PAINT_SHOP (KWH)',
                                data: response.PAINT_SHOP_ActiveEnergy,
                                borderColor: 'rgba(255, 206, 86, 1)',
                                fill: false
                            },
                            {
                                label: 'TRANSFORMER_WISE (KWH)',
                                data: response.TRANSFORMER_WISE_ActiveEnergy,
                                borderColor: 'rgba(75, 192, 192, 1)',
                                fill: false
                            },
                            {
                                label: 'UTILITIES (KWH)',
                                data: response.UTILITIES_ActiveEnergy,
                                borderColor: 'rgba(153, 102, 255, 1)',
                                fill: false
                            }
                        ]
                    };
                    resolve(labels);
                } else {
                    resolve(null);
                }
            },
            error: function (error) {
                reject(error);
            }
        });
    });
}
    function generateChart_All(labels) {
        var ctx = document.getElementById('myLineChart').getContext('2d');

        if (myLineChart) {
            myLineChart.destroy(); // Destroy the existing chart instance
        }

        myLineChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels.label,
                datasets: labels.datasets
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: true,
                            text: 'TIMINGS',
                            font: {
                                size: 20,
                                weight: 'bold',
                                family: 'Arial'
                            },
                            color: 'darkblue'
                        }
                    },
                    y: {
                        display: true,
                        title: {
                            display: true,
                            text: 'UNITS',
                            font: {
                                size: 20,
                                weight: 'bold',
                                family: 'Arial'
                            },
                            color: 'darkblue'
                        }
                    }
                }
            }
        });
    }
/*function generateChart_All(labels) {
    var ctx = document.getElementById('myLineChart').getContext('2d');

    if (myLineChart) {
        myLineChart.destroy(); // Destroy the existing chart instance
    }

    myLineChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels.label,
            datasets: labels.datasets
        },
        options: {
            responsive: true,
            scales: {
                x: {
                    title: {
                        display: true,
                        text: 'TIMING',
                        font: {
                            size: 20,
                            weight: 'bold',
                            family: 'Arial'
                        },
                        color: 'darkblue'
                    }
                },
                y: {
                    title: {
                        display: true,
                        text: 'UNITS',
                        font: {
                            size: 20,
                            weight: 'bold',
                            family: 'Arial'
                        },
                        color: 'darkblue'
                    },
                    beginAtZero: true
                }
            },
            plugins: {
                legend: {
                    display: true,
                    position: 'left',
                    labels: {
                        boxWidth: 20,
                        padding: 15,
                        font: {
                            size: 14,
                            family: 'Arial'
                        },
                        color: 'black'
                    }
                },
                annotation: {
                    annotations: {
                        line1: {
                            type: 'line',
                            yMin: 5,
                            yMax: 60,
                            borderColor: 'red',
                            borderWidth: 2,
                            label: {
                                content: 'Target',
                                enabled: true,
                                position: 'end'
                            }
                        }
                    }
                }
            }
        },
        plugins: [{
            id: 'targetLine',
            afterDraw: (chart) => {
                drawHorizontalLine(chart, targetLineValue, '#1ecbe1');
            }
        }]
    });

}*/



    function GetDataForGenerateGraph(selectedMeter, selectedGroup, StartDate, EndDate, TimeInterval) {
        return new Promise((resolve, reject) => {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetOverAllIndex_Graph", "Graph")',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ groupId: selectedGroup, strMeterId: selectedMeter, strFD: StartDate, strTD: EndDate, Interval: TimeInterval }),
                success: function (response) {
                    var data = response.ActiveEnergy;
                    if (data != null) {
                        var label = response.SYNCDATETIME; // Example label, you can change this as needed.
                        var labels = {
                            label: label,
                            data: data
                        };
                        resolve(labels);
                    } else {
                        resolve(null);
                    }
                },
                error: function (error) {
                    reject(error);
                }
            });
        });
    }

    function generateChart(labels,name) {
        var ctx = document.getElementById('myLineChart').getContext('2d');

        if (myLineChart) {
            myLineChart.destroy(); // Destroy the existing chart instance
        }

        myLineChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels.label,
                datasets: [{
                    label: name,
                    data: labels.data,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 2,
                    fill: false
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: true,
                            text: 'TIMING',
                            font: {
                                size: 20,
                                weight: 'bold',
                                family: 'Arial'
                            },
                            color: 'darkblue'
                        }
                    },
                    y: {
                        display: true,
                        title: {
                            display: true,
                            text: 'UNITS',
                            font: {
                                size: 20,
                                weight: 'bold',
                                family: 'Arial'
                            },
                            color: 'darkblue'
                        }
                    }
                }
            }
        });
    }


    /*function generateChart(labels) {
        var ctx = document.getElementById('myLineChart').getContext('2d');

        if (myLineChart) {
            myLineChart.destroy(); // Destroy the existing chart instance
        }

        myLineChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels.label,
                datasets: [{
                    label: 'Active Energy',
                    data: labels.data,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1,
                    fill: false
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'TIMING',
                            font: {
                                size: 20,
                                weight: 'bold',
                                family: 'Arial'
                            },
                            color: 'darkblue'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'UNITS',
                            font: {
                                size: 20,
                                weight: 'bold',
                                family: 'Arial'
                            },
                            color: 'darkblue'
                        },
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'left',
                        labels: {
                            boxWidth: 20,
                            padding: 15,
                            font: {
                                size: 14,
                                family: 'Arial'
                            },
                            color: 'black'
                        }
                    },
                    annotation: {
                        annotations: {
                            line1: {
                                type: 'line',
                                yMin: 5,
                                yMax: 60,
                                borderColor: 'red',
                                borderWidth: 2,
                                label: {
                                    content: 'Target',
                                    enabled: true,
                                    position: 'end'
                                }
                            }
                        }
                    }
                }
            },
            plugins: [{
                id: 'targetLine',
                afterDraw: (chart) => {
                    drawHorizontalLine(chart, targetLineValue, '#1ecbe1');
                }
            }]
        });

    }*/

    ///Table View Scripts
    function LoadTableData_Specific(strMId, strFDate, strTDate) {
        debugger;
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetTableData", "Graph")',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({ strId: strMId, strFD: strFDate, strTD: strTDate }),
            success: function (response) {
                if (response) {
                    const tableBody = document.querySelector('#dataTable tbody');
                    tableBody.innerHTML = '';
                    debugger;
                    for (let i = 0; i < response.Consumption.length; i++) {
                        const row = document.createElement('tr');
                        row.innerHTML = `<tr>
                                    <td>${response.MeterName[i]}</td>
                                    <td>${response.DateAndTime[i]}</td>
                                    <td>${response.ActiveEnergy[i]}</td>
                                    <td>${response.Consumption[i]}</td>
                                    <td>${response.Current_A[i]}</td>
                                    <td>${response.Current_B[i]}</td>
                                    <td>${response.Current_C[i]}</td>
                                    <td>${response.Voltage_A[i]}</td>
                                    <td>${response.Voltage_B[i]}</td>
                                    <td>${response.Voltage_C[i]}</td>
                                    <td>${response.MaxDemand[i]}</td>
                                    <td>${response.PowerFactor[i]}</td>
                                </tr>`;
                        tableBody.appendChild(row);
                    }
                }
                else {
                    alert('No Data Found.' + response);
                }
            },
            error: function (err) {
                alert('Error : ' + err);
            }
        });
    }

    function LoadTableData_Overall(strGId, strFDate, strTDate) {
         debugger;
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetTableData_Overall", "Graph")',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({ strGroup: strGId, strFD: strFDate, strTD: strTDate }),
            success: function (response) {
                const tableBody = document.getElementById('th_overall');
                const row = document.createElement('tr');
                row.innerHTML = `<tr>
                    <td>${response.group}</td>
                    <td>${response.datetime}</td>
                    <td>${response.consumption}</td>
                </tr>`;
                tableBody.appendChild(row);                
            },
            Error: function (err) {
                alert(err);
            }
        });
    }

    document.getElementById('btnTable').onclick = function () {
        document.getElementById('customers_table').style = '';
        document.getElementById('graph_container').style = 'display:none;';

        var selectedGroup = document.getElementById('groupSelect').value;
        var selectedMeter = document.getElementById('meterSelect').value;
        var StartDate = document.getElementById('fromDate').value;
        var EndDate = document.getElementById('toDate').value;
        var TimeInterval = document.getElementById('txtInterval').value;

        if (selectedMeter != "ALLMETERS" && selectedGroup != "ALLGROUPS") {
            //GetDataForGenerateGraph(selectedMeter, selectedGroup, StartDate, EndDate, TimeInterval).then((labels) => {
            //    if (labels != null) {
            //        generateChart(labels);
            //    }
            //});
            document.getElementById('th_specific').style = '';
            document.getElementById('th_overall').style = 'display:none;';
            LoadTableData_Specific(selectedMeter, StartDate, EndDate);

        } else if (selectedGroup = "ALLGROUPS") {
            //GetDataForGenerateGraph_All(selectedMeter, selectedGroup, StartDate, EndDate, TimeInterval).then((labels) => {
            //    if (labels != null) {
            //        generateChart_All(labels);
            //    }
            //});
            //document.getElementById('th_specific').style = '';
            //document.getElementById('th_overall').style = 'display:none;';


            var x = document.getElementById('groupSelect');
            var txt = '';
            var i;
            for (i = 0; i < x.length; i++) {
                txt = x.options[i].value;
                if (txt !== "ALLGROUPS") {
                    LoadTableData_Overall(txt, StartDate, EndDate);
                }

            }

        }
    };

        const csv_btn = document.querySelector('#toCSV');
        const toCSV = function (table) {
            const t_heads = table.querySelectorAll('th'),
                tbody_rows = table.querySelectorAll('tbody tr');
            // Capture and format headings
            const headings = [...t_heads].map(head => head.textContent.trim().toUpperCase());
            // Capture and format table data
            const table_data = [...tbody_rows].map(row => {
                const cells = row.querySelectorAll('td');
                const cells_data = [...cells].map(cell => cell.textContent.trim());
                return cells_data;
            });
            return [headings, ...table_data];
        }
        const downloadXLSX = (data, fileName) => {
            const ws = XLSX.utils.aoa_to_sheet(data);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'OverAll_Export');
            XLSX.writeFile(wb, `${fileName}.xlsx`);
        }
        csv_btn.onclick = () => {
            const table = document.getElementById('dataTable');
            const data = toCSV(table);
            downloadXLSX(data, 'OverAll_Export');
        }
</script>
