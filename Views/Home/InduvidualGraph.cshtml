
@{
    ViewBag.Title = "GRAPH VIEW";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var groupId = ViewBag.groupId;
    var groupName = ViewBag.groupName;
    var FDate = ViewBag.FromDate;
    var TDate = ViewBag.ToDate;
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="~/Scripts/linechart.js"></script>


    <style>
        body {
            font-family: 'Arial', sans-serif;
            margin: 20px;
            text-align: center;
        }

        h1 {
            color: darkblue;
        }

        canvas {
            border: 2px solid #858080;
        }


        .form__input {
            border: 0;
            outline: 0;
            color: rgb(60, 66, 87);
            background-color: rgb(255, 255, 255);
            box-shadow: rgb(0 0 0 / 0%) 0px 0px 0px 0px, rgb(0 0 0 / 0%) 0px 0px 0px 0px, rgb(0 0 0 / 0%) 0px 0px 0px 0px, rgb(60 66 87 / 16%) 0px 0px 0px 1px, rgb(0 0 0 / 0%) 0px 0px 0px 0px, rgb(0 0 0 / 0%) 0px 0px 0px 0px, rgb(0 0 0 / 0%) 0px 0px 0px 0px;
            border-radius: 4px;
            font-size: 14px;
            line-height: 20px;
            font-weight: 400;
            padding: 4px 8px;
            min-height: 28px;
            vertical-align: middle;
            transition: background-color .24s,box-shadow .24s;
            transition-property: background-color, box-shadow;
            transition-duration: 0.24s, 0.24s;
            transition-timing-function: ease, ease;
            transition-delay: 0s, 0s;
        }

        :focus {
            box-shadow: rgb(80 63 205 / 50%) 0px 1px 40px;
            transition: all 0.1s ease 0s;
        }

        .form__btn {
            display: inline-block;
            outline: 0;
            border: 0;
            cursor: pointer;
            color: #fff;
            font-weight: 500;
            border-radius: 4px;
            font-size: 14px;
            height: 30px;
            padding: 1px 15px;
            text-shadow: rgb(0 0 0 / 25%) 0px 3px 8px;
            background: linear-gradient(92.88deg, rgb(69, 94, 181) 9.16%, rgb(86, 67, 204) 43.89%, rgb(103, 63, 215) 64.72%);
            transition: all 0.5s ease 0s;
        }

            .form__btn:hover {
                box-shadow: rgb(80 63 205 / 50%) 0px 1px 40px;
                transition: all 0.1s ease 0s;
            }
    </style>

</head>
<body>
    <h1>PSA | <span style="color:darkred">@Html.Raw(groupName)</span> | LINE CHART <span style="color:darkred;">@DateTime.Now</span></h1>
    <div class="container" style="padding:10px">
        <input type="number" class="form__input" id="targetValue" value="60" />
        <button class="form__btn" onclick="updateTargetLine()">Set Target</button>
    </div>
    <canvas id="myLineChart" width="380" height="150" style="overflow:auto;"></canvas>

    <script>
        window.onload = function () {
            var groupId = '@Html.Raw(groupId)';
            var FrDate  = '@Html.Raw(FDate)';
            var TooDate = '@Html.Raw(TDate)';
            LoadGraphData(groupId, FrDate, TooDate);
        }

        function LoadGraphData(grupId, FromDate, ToDate) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetGraphData", "Home")',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ strGroupId: grupId, strFromDate: FromDate, strToDate: ToDate }),
                success: function (response) {
                    if (response) {
                        maxDemandData = response.MaxDemand.map(x => parseFloat(x));
                        powerFactorData = response.PowerFactor.map(x => parseFloat(x));
                        activeEnergyData = response.ActiveEnergy.map(x => parseFloat(x));

                        myLineChart.data.datasets[0].data = maxDemandData;
                        myLineChart.data.datasets[1].data = powerFactorData;
                        myLineChart.data.datasets[2].data = activeEnergyData;

                        myLineChart.update();
                    } else {
                        alert('No data found');
                    }
                },
                error: function (err) {
                    alert('Error : ' + err);
                }
            });
        }

        const startTime = new Date(2024, 5, 6, 0, 0); // June 6, 2024, 00:00
        const endTime = new Date(2024, 5, 6, 23, 59); // June 6, 2024, 24:00
        const increment = @System.Configuration.ConfigurationManager.AppSettings["DStime"];

        const labels = generateTimeline(startTime, endTime, increment);

        function generateTimeline(startTime, endTime, increment) {
            const timeline = [];
            let currentTime = new Date(startTime);

            while (currentTime <= endTime) {
                let hours = currentTime.getHours().toString().padStart(2, '0');
                let minutes = currentTime.getMinutes().toString().padStart(2, '0');
                timeline.push(`${hours}:${minutes}`);
                currentTime.setMinutes(currentTime.getMinutes() + increment);
            }

            return timeline;
        }

        let maxDemandData = [];
        let powerFactorData = [];
        let activeEnergyData = [];

        let ctx = document.getElementById('myLineChart').getContext('2d');

        let targetLineValue = document.getElementById('targetValue').value;

        function drawHorizontalLine(chartInstance, value, color) {
            const yScale = chartInstance.scales.y;
            const yPos = yScale.getPixelForValue(value);

            chartInstance.ctx.save();
            chartInstance.ctx.beginPath();
            chartInstance.ctx.moveTo(chartInstance.chartArea.left, yPos);
            chartInstance.ctx.lineTo(chartInstance.chartArea.right, yPos);
            chartInstance.ctx.strokeStyle = color;
            chartInstance.ctx.lineWidth = 1;
            chartInstance.ctx.shadowColor = color;
            chartInstance.ctx.shadowBlur = 10;
            chartInstance.ctx.stroke();
            chartInstance.ctx.restore();
        }

        let myLineChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Maximum Demand',
                        data: maxDemandData,
                        borderColor: 'blue',
                        borderWidth: 2,
                        fill: false,
                    },
                    {
                        label: 'Power Factor',
                        data: powerFactorData,
                        borderColor: 'red',
                        borderWidth: 2,
                        fill: false,
                    },
                    {
                        label: 'Active Energy Delivered',
                        data: activeEnergyData,
                        borderColor: 'green',
                        borderWidth: 2,
                        fill: true,
                    }
                ]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'TIMING',
                            font: {
                                size: 20,
                                weight: 'bold',
                                family: 'Arial'
                            },
                            color: 'darkblue'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'UNITS',
                            font: {
                                size: 20,
                                weight: 'bold',
                                family: 'Arial'
                            },
                            color: 'darkblue'
                        },
                        beginAtZero: true
                    }
                }
            },
            plugins: {
                annotation: {
                    annotations: {
                        line1: {
                            type: 'line',
                            yMin: targetLineValue,
                            yMax: targetLineValue,
                            borderColor: 'red',
                            borderWidth: 2,
                            label: {
                                content: 'Target',
                                enabled: true,
                                position: 'end'
                            }
                        }
                    }
                }
            },

            plugins: [{
                id: 'targetLine',
                afterDraw: (chart) => {
                    drawHorizontalLine(chart, targetLineValue, '#1ecbe1');
                }
            }]
        });

        function updateTargetLine() {
            targetLineValue = document.getElementById('targetValue').value;
            myLineChart.update();
        }
    </script>

</body>

</html>


