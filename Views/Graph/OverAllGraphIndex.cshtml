
@{
    ViewBag.Title = "OverAllGraphIndex";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var Id = ViewBag.Id;
    var Name = ViewBag.Name;
    var FromDate = ViewBag.FD;
    var ToDate = ViewBag._TD;
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="~/Scripts/linechart.js"></script>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            margin: 20px;
            text-align: center;
        }

        h1 {
            color: darkblue;
        }

        canvas {
            border: 2px solid #858080;
        }


        .form__input {
            border: 0;
            outline: 0;
            color: rgb(60, 66, 87);
            background-color: rgb(255, 255, 255);
            box-shadow: rgb(0 0 0 / 0%) 0px 0px 0px 0px, rgb(0 0 0 / 0%) 0px 0px 0px 0px, rgb(0 0 0 / 0%) 0px 0px 0px 0px, rgb(60 66 87 / 16%) 0px 0px 0px 1px, rgb(0 0 0 / 0%) 0px 0px 0px 0px, rgb(0 0 0 / 0%) 0px 0px 0px 0px, rgb(0 0 0 / 0%) 0px 0px 0px 0px;
            border-radius: 4px;
            font-size: 14px;
            line-height: 20px;
            font-weight: 400;
            padding: 4px 8px;
            min-height: 28px;
            vertical-align: middle;
            transition: background-color .24s,box-shadow .24s;
            transition-property: background-color, box-shadow;
            transition-duration: 0.24s, 0.24s;
            transition-timing-function: ease, ease;
            transition-delay: 0s, 0s;
        }

        :focus {
            box-shadow: rgb(80 63 205 / 50%) 0px 1px 40px;
            transition: all 0.1s ease 0s;
        }

        .form__btn {
            display: inline-block;
            outline: 0;
            border: 0;
            cursor: pointer;
            color: #fff;
            font-weight: 500;
            border-radius: 4px;
            font-size: 14px;
            height: 30px;
            padding: 1px 15px;
            text-shadow: rgb(0 0 0 / 25%) 0px 3px 8px;
            background: linear-gradient(92.88deg, rgb(69, 94, 181) 9.16%, rgb(86, 67, 204) 43.89%, rgb(103, 63, 215) 64.72%);
            transition: all 0.5s ease 0s;
        }

            .form__btn:hover {
                box-shadow: rgb(80 63 205 / 50%) 0px 1px 40px;
                transition: all 0.1s ease 0s;
            }

        .lblcss {
            font-family: 'Nunito', sans-serif;
            font-size: 0.9375rem;
            font-weight: 500;
            letter-spacing: 0.045rem;
            font-style: normal;
            text-transform: uppercase;
            color: #FFFFFF;
            background-color: #0030c2;
            border-radius: .2rem;
            -webkit-border-radius: .2rem;
            -moz-border-radius: 0rem;
            padding: 0.30rem 0.5rem;
            border-style: none;
            border-width: 0rem;
            border-color: darkred;
        }

        .menu-icon {
            position: absolute;
            top: 10px;
            right: 35px;
            font-size: 30px;
            cursor: pointer;
            z-index: 1001;
        }

        .controls-container {
            position: fixed;
            top: 70px;
            right: 20px;
            z-index: 1000;
        }

        .controls {
            display: none;
            flex-direction: column;
            align-items: flex-start;
            background-color: #dad9d9;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
        }

        .date-selector {
            margin-bottom: 20px;
        }

            .date-selector label {
                display: block;
                color: forestgreen;
                font-weight: bold;
                font-size: 17px;
            }

            .date-selector input {
                margin-bottom: 10px;
                display: block;
                width: 365px;
                padding: 5px;
                border: 1px solid #ccc;
                border-radius: 5px;
            }

        .side-buttons button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            margin-bottom: 10px; /* Add some space between the buttons */
            width: 100%; /* Make buttons take full width of their container */
        }

            .side-buttons button:hover {
                background-color: #45a049;
            }

        .heading {
            border: 1px solid;
            background-color: #E3F2FD;
            color: dodgerblue;
            border-radius: 10px;
            font-size: 30px;
            font-family: Arial;
            font-weight: bold;
            text-align: center;
            width: 100%;
            padding: 10px;
            margin: 0;
            height: 72px;
        }
    </style>
</head>
<body>
    <div class="heading">PSA | <span style="color:darkred">@Html.Raw(Name)</span> | LINE CHART <span style="color:darkred;">@DateTime.Now</span></div>
    @*<div class="menu-icon" onclick="toggleControls()">☰</div>*@
    <div class="controls-container">
        <div class="controls">
            <div class="date-selector">
                <label for="FromDate">From Date:</label>
                <input type="date" id="Fdate" name="fromdate">
                <label for="ToDate">To Date:</label>
                <input type="date" id="Tdate" name="todate">
            </div>
            <div class="side-buttons">
                <button id="viewGraphBtn" onclick="viewGraphBtn_Clicked()">View Graph</button>
                @*<button id="viewDataBtn">View Data</button>
                    <button id="exportXLBtn">Export XL</button>*@
            </div>
        </div>
    </div>
    <div class="container" style="padding:10px">
        <input type="number" class="form__input" id="targetValue" value="60" />
        <button class="form__btn" onclick="updateTargetLine()">Set Target</button>
        <label class="lblcss" style="margin-left:100px;">KWH</label>
        <input type="text" id="txtConsumption" class="form__input" value="0" readonly="readonly" style="margin-left:5px; border-color:cornflowerblue !important;border-width:1px !important;" />

    </div>
    <canvas id="myLineChart" width="380" height="150" style="overflow:auto;" onclick="toggleControls1()"></canvas>

    <script>
        window.onload = function () {
            var Id = '@Html.Raw(Id)';
            var FromDate = '@Html.Raw(FromDate)';
            var ToDate = '@Html.Raw(ToDate)';
            var Name = '@Html.Raw(Name)';
            LoadGraphData(Id, FromDate,ToDate,Name);
        }

        function LoadGraphData(Id, FromDate,ToDate, Name) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetOverAllGraphData", "Graph")',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ groupId: Id, strFD: FromDate, strTD: ToDate, groupName: Name }),
                success: function (response) {
                    if (response) {
                        maxDemandData = response.MaxDemand.map(x => parseFloat(x));
                        powerFactorData = response.PowerFactor.map(x => parseFloat(x));
                        activeEnergyData = response.ActiveEnergy.map(x => parseFloat(x));

                        myLineChart.data.datasets[0].data = maxDemandData;
                        myLineChart.data.datasets[1].data = powerFactorData;
                        myLineChart.data.datasets[2].data = activeEnergyData;

                        let sum = activeEnergyData.reduce((accumulator, currentValue) => {
                            return accumulator + currentValue;
                        }, 0);

                        let inputField = document.getElementById('txtConsumption');
                        inputField.value = sum.toFixed(2);

                        myLineChart.update();
                    } else {
                        alert('No data found');
                    }
                },
                error: function (err) {
                    alert('Error : ' + err);
                }
            });
        }

        function viewGraphBtn_Clicked() {
            debugger;
            var fromD = document.getElementById('Fdate').value;
            var toD = document.getElementById('Tdate').value;
            var MId = "@Html.Raw(Id)";
            if (fromD != "" && toD != "" && MId != "") {
                LoadGraphData(MId, fromD, toD);
            } else {
                alert('Please Check the Date Selection & Meter Selection.');
            }
        }

        const startTime = new Date(2024, 5, 6, 0, 0); // June 6, 2024, 00:00
        const endTime = new Date(2024, 5, 6, 23, 59); // June 6, 2024, 24:00
        const increment = @System.Configuration.ConfigurationManager.AppSettings["DStime"];

        const labels = generateTimeline(startTime, endTime, increment);

        function generateTimeline(startTime, endTime, increment) {
            const timeline = [];
            let currentTime = new Date(startTime);

            while (currentTime <= endTime) {
                let hours = currentTime.getHours().toString().padStart(2, '0');
                let minutes = currentTime.getMinutes().toString().padStart(2, '0');
                timeline.push(`${hours}:${minutes}`);
                currentTime.setMinutes(currentTime.getMinutes() + increment);
            }

            return timeline;
        }

        let maxDemandData = [];
        let powerFactorData = [];
        let activeEnergyData = [];

        let ctx = document.getElementById('myLineChart').getContext('2d');

        let targetLineValue = document.getElementById('targetValue').value;

        function drawHorizontalLine(chartInstance, value, color) {
            const yScale = chartInstance.scales.y;
            const yPos = yScale.getPixelForValue(value);

            chartInstance.ctx.save();
            chartInstance.ctx.beginPath();
            chartInstance.ctx.moveTo(chartInstance.chartArea.left, yPos);
            chartInstance.ctx.lineTo(chartInstance.chartArea.right, yPos);
            chartInstance.ctx.strokeStyle = color;
            chartInstance.ctx.lineWidth = 1;
            chartInstance.ctx.shadowColor = color;
            chartInstance.ctx.shadowBlur = 10;
            chartInstance.ctx.stroke();
            chartInstance.ctx.restore();
        }

        let myLineChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Maximum Demand',
                        data: maxDemandData,
                        borderColor: 'blue',
                        borderWidth: 2,
                        fill: false,
                    },
                    {
                        label: 'Power Factor',
                        data: powerFactorData,
                        borderColor: 'red',
                        borderWidth: 2,
                        fill: false,
                    },
                    {
                        label: 'Active Energy Delivered',
                        data: activeEnergyData,
                        borderColor: 'green',
                        borderWidth: 2,
                        fill: true,
                    }
                ]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'TIMING',
                            font: {
                                size: 20,
                                weight: 'bold',
                                family: 'Arial'
                            },
                            color: 'darkblue'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'UNITS',
                            font: {
                                size: 20,
                                weight: 'bold',
                                family: 'Arial'
                            },
                            color: 'darkblue'
                        },
                        beginAtZero: true
                    }
                }
            },
            plugins: {
                annotation: {
                    annotations: {
                        line1: {
                            type: 'line',
                            yMin: targetLineValue,
                            yMax: targetLineValue,
                            borderColor: 'red',
                            borderWidth: 2,
                            label: {
                                content: 'Target',
                                enabled: true,
                                position: 'end'
                            }
                        }
                    }
                }
            },

            plugins: [{
                id: 'targetLine',
                afterDraw: (chart) => {
                    drawHorizontalLine(chart, targetLineValue, '#1ecbe1');
                }
            }]
        });

        function updateTargetLine() {
            targetLineValue = document.getElementById('targetValue').value;
            myLineChart.update();
        }

        //For Toggle Menu Icons Hide Only
        function toggleControls1() {
            const controls = document.querySelector('.controls');
            controls.style.display = "none";
        }

        //For Toggle Menu Icons Both Open and Hide
        function toggleControls() {
            const controls = document.querySelector('.controls');
            if (controls.style.display === "none" || controls.style.display === "") {
                controls.style.display = "flex";
            } else {
                controls.style.display = "none";
            }
        }

    </script>

</body>

</html>



